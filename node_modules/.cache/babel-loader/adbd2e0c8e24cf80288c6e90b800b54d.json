{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\n\nvar crypto_extra_1 = __importDefault(require(\"crypto-extra\"));\n\nvar _data_1 = __importDefault(require(\"./_data\"));\n\nvar Word;\n\n(function (Word) {\n  Word[\"Adjective\"] = \"adjectives\";\n  Word[\"Noun\"] = \"nouns\";\n  Word[\"Verb\"] = \"verbs\";\n})(Word || (Word = {}));\n\nfunction randomFromArray(arr) {\n  return arr[crypto_extra_1[\"default\"].randomNumber({\n    max: arr.length - 1\n  })];\n}\n\nexports.randomFromArray = randomFromArray;\n\nfunction getPattern(count) {\n  switch (count) {\n    case 0:\n      return [];\n\n    case 1:\n      return [Word.Noun];\n\n    case 3:\n      return [Word.Adjective, Word.Noun, Word.Verb];\n\n    case 4:\n      return [Word.Adjective, Word.Noun, Word.Noun, Word.Verb];\n\n    case 2:\n    default:\n      return randomFromArray([[Word.Adjective, Word.Noun], [Word.Noun, Word.Verb]]);\n  }\n}\n\nexports.getPattern = getPattern;\n\nfunction getSalt(type, length) {\n  var charset;\n\n  switch (type) {\n    case \"string\":\n      charset = \"abcdefghijklmnopqrstuvwxyz\";\n      break;\n\n    case \"number\":\n      charset = \"0123456789\";\n      break;\n\n    case \"mixed\":\n    default:\n      charset = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  }\n\n  return crypto_extra_1[\"default\"].randomString(length, charset);\n}\n\nexports.getSalt = getSalt;\n\nfunction default_1(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  if (opts.char) {\n    console.log(\"namor.generate(): `char` option has been renamed to `separator`\");\n    opts.separator = opts.char;\n  }\n\n  if (opts.numbers) {\n    console.log(\"namor.generate(): `numbers` option has been renamed to `saltLength`/`saltType`\");\n    opts.saltLength = opts.numbers;\n    opts.saltType = \"number\";\n  }\n\n  if (opts.manly) {\n    console.log(\"namor.generate(): `manly` option is deprecated, use `subset` instead\");\n    opts.subset = \"manly\";\n  }\n\n  if (opts.words && (opts.words < 1 || opts.words > 4)) {\n    throw new TypeError(\"Word count must be between 1-4\");\n  }\n\n  opts.separator = opts.separator || \"-\";\n  opts.words = Number(opts.words !== undefined ? opts.words : 2);\n  opts.saltType = opts.saltType || \"mixed\";\n  opts.saltLength = Number(opts.saltLength !== undefined ? opts.saltLength : 5);\n  var dictionary = opts.subset ? _data_1[\"default\"][opts.subset] : _data_1[\"default\"];\n  var salt = opts.saltLength > 0 ? getSalt(opts.saltType, opts.saltLength) : null;\n  var name = getPattern(opts.words).map(function (type) {\n    return randomFromArray(dictionary[type]);\n  }).concat([salt]).filter(Boolean).join(opts.separator);\n\n  if (name.length > 63) {\n    throw new TypeError(\"Subdomains cannot be longer than 63 characters! Try shortening your trailing salt.\");\n  }\n\n  return name;\n}\n\nexports[\"default\"] = default_1;","map":null,"metadata":{},"sourceType":"script"}