{"ast":null,"code":"import _objectSpread from \"/Volumes/Dev and Docs/repos/React-POC/reward-only-table/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport namor from \"namor\";\n\nvar range = function range(len) {\n  var arr = [];\n\n  for (var i = 0; i < len; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\n\nvar generateRewards = function generateRewards(amount) {\n  if (amount < 50) return 0;\n  if (amount >= 50 && amount <= 100) return amount - 50;\n\n  if (amount > 100) {\n    var rewards2x = (amount - 100) * 2;\n    var rewards1x = generateRewards(100);\n    return rewards1x + rewards2x;\n  }\n\n  return amount;\n};\n\nvar newPerson = function newPerson() {\n  var amount = Math.floor(Math.random() * 500);\n  return {\n    firstName: namor.generate({\n      words: 1,\n      saltLength: 0,\n      subset: \"manly\"\n    }),\n    lastName: namor.generate({\n      words: 1,\n      saltLength: 0,\n      subset: \"manly\"\n    }),\n    amount: amount.toFixed(2),\n    rewards: generateRewards(amount)\n  };\n};\n\nexport default function makeData() {\n  for (var _len = arguments.length, lens = new Array(_len), _key = 0; _key < _len; _key++) {\n    lens[_key] = arguments[_key];\n  }\n\n  var makeDataLevel = function makeDataLevel() {\n    var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var len = lens[depth];\n    return range(len).map(function (d) {\n      return _objectSpread({}, newPerson(), {\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      });\n    });\n  };\n\n  return makeDataLevel();\n}","map":{"version":3,"sources":["/Volumes/Dev and Docs/repos/React-POC/reward-only-table/src/makeData.js"],"names":["namor","range","len","arr","i","push","generateRewards","amount","rewards2x","rewards1x","newPerson","Math","floor","random","firstName","generate","words","saltLength","subset","lastName","toFixed","rewards","makeData","lens","makeDataLevel","depth","map","d","subRows","undefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,GAAG,EAAI;AACnB,MAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5BD,IAAAA,GAAG,CAACE,IAAJ,CAASD,CAAT;AACD;;AACD,SAAOD,GAAP;AACD,CAND;;AAOA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,MAAM,EAAI;AAChC,MAAIA,MAAM,GAAG,EAAb,EAAiB,OAAO,CAAP;AACjB,MAAIA,MAAM,IAAI,EAAV,IAAgBA,MAAM,IAAI,GAA9B,EAAmC,OAAOA,MAAM,GAAG,EAAhB;;AACnC,MAAIA,MAAM,GAAG,GAAb,EAAkB;AAChB,QAAMC,SAAS,GAAG,CAACD,MAAM,GAAG,GAAV,IAAiB,CAAnC;AACA,QAAME,SAAS,GAAGH,eAAe,CAAC,GAAD,CAAjC;AACA,WAAOG,SAAS,GAAGD,SAAnB;AACD;;AACD,SAAOD,MAAP;AACD,CATD;;AAUA,IAAMG,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,MAAMH,MAAM,GAAGI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAf;AACA,SAAO;AACLC,IAAAA,SAAS,EAAEd,KAAK,CAACe,QAAN,CAAe;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,UAAU,EAAE,CAAxB;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KAAf,CADN;AAELC,IAAAA,QAAQ,EAAEnB,KAAK,CAACe,QAAN,CAAe;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,UAAU,EAAE,CAAxB;AAA2BC,MAAAA,MAAM,EAAE;AAAnC,KAAf,CAFL;AAGLX,IAAAA,MAAM,EAAEA,MAAM,CAACa,OAAP,CAAe,CAAf,CAHH;AAILC,IAAAA,OAAO,EAAEf,eAAe,CAACC,MAAD;AAJnB,GAAP;AAMD,CARD;;AAUA,eAAe,SAASe,QAAT,GAA2B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACxC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAe;AAAA,QAAdC,KAAc,uEAAN,CAAM;AACnC,QAAMvB,GAAG,GAAGqB,IAAI,CAACE,KAAD,CAAhB;AACA,WAAOxB,KAAK,CAACC,GAAD,CAAL,CAAWwB,GAAX,CAAe,UAAAC,CAAC,EAAI;AACzB,+BACKjB,SAAS,EADd;AAEEkB,QAAAA,OAAO,EAAEL,IAAI,CAACE,KAAK,GAAG,CAAT,CAAJ,GAAkBD,aAAa,CAACC,KAAK,GAAG,CAAT,CAA/B,GAA6CI;AAFxD;AAID,KALM,CAAP;AAMD,GARD;;AAUA,SAAOL,aAAa,EAApB;AACD","sourcesContent":["import namor from \"namor\";\n\nconst range = len => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst generateRewards = amount => {\n  if (amount < 50) return 0;\n  if (amount >= 50 && amount <= 100) return amount - 50;\n  if (amount > 100) {\n    const rewards2x = (amount - 100) * 2;\n    const rewards1x = generateRewards(100);\n    return rewards1x + rewards2x;\n  }\n  return amount;\n};\nconst newPerson = () => {\n  const amount = Math.floor(Math.random() * 500);\n  return {\n    firstName: namor.generate({ words: 1, saltLength: 0, subset: \"manly\" }),\n    lastName: namor.generate({ words: 1, saltLength: 0, subset: \"manly\" }),\n    amount: amount.toFixed(2),\n    rewards: generateRewards(amount)\n  };\n};\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n"]},"metadata":{},"sourceType":"module"}