{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nexports.__esModule = true;\n\nvar crypto_1 = __importDefault(require(\"crypto\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar ALGORITHM = \"aes-256-ctr\";\nvar HMAC_ALGORITHM = \"sha256\";\n\nfunction getEncryptionKey(key) {\n  var encryptionKey = key || process.env.ENCRYPTION_KEY;\n\n  if (!encryptionKey) {\n    throw new Error(\"No encryption key was found\");\n  }\n\n  var cryptoKey = crypto_1[\"default\"].createHash(\"sha256\").update(encryptionKey).digest();\n  return cryptoKey;\n}\n\nfunction constantTimeCompare(val1, val2) {\n  if (val1.length !== val2.length) {\n    return false;\n  }\n\n  var sentinel = 0;\n\n  for (var i = 0, len = val1.length; i < len; i++) {\n    sentinel |= val1.charCodeAt(i) ^ val2.charCodeAt(i);\n  }\n\n  return sentinel === 0;\n}\n\nfunction encrypt(value, key) {\n  var iv = Buffer.from(crypto_1[\"default\"].randomBytes(16));\n  var encryptionKey = Buffer.from(getEncryptionKey(key));\n  var cipher = crypto_1[\"default\"].createCipheriv(ALGORITHM, encryptionKey, iv);\n  cipher.setEncoding(\"hex\");\n  cipher.write(utils_1.stringify(value));\n  cipher.end();\n  var cipherText = cipher.read();\n  var hmac = crypto_1[\"default\"].createHmac(HMAC_ALGORITHM, encryptionKey);\n  hmac.update(cipherText);\n  hmac.update(iv.toString(\"hex\"));\n  return cipherText + \"$\" + iv.toString(\"hex\") + \"$\" + hmac.digest(\"hex\");\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(value, key) {\n  var cipher = value.split(\"$\");\n  var iv = Buffer.from(cipher[1], \"hex\");\n  var encryptionKey = Buffer.from(getEncryptionKey(key));\n  var hmac = crypto_1[\"default\"].createHmac(HMAC_ALGORITHM, encryptionKey);\n  hmac.update(cipher[0]);\n  hmac.update(iv.toString(\"hex\"));\n\n  if (!constantTimeCompare(hmac.digest(\"hex\"), cipher[2])) {\n    throw new Error(\"Encrypted payload has been tampered with\");\n  }\n\n  var decipher = crypto_1[\"default\"].createDecipheriv(ALGORITHM, encryptionKey, iv);\n  var decryptedText = decipher.update(cipher[0], \"hex\");\n  var final = \"\" + decryptedText + decipher.final();\n\n  try {\n    return JSON.parse(final);\n  } catch (err) {\n    return final;\n  }\n}\n\nexports.decrypt = decrypt;","map":null,"metadata":{},"sourceType":"script"}